generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Profile {
  id          Int      @id @default(autoincrement())
  name        String   @db.NVarChar(100)
  description String   @db.NVarChar(500)
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   @db.NVarChar(100)
  updatedBy   String?  @db.NVarChar(100)
  users       User[]
}

model User {
  id          String   @id @default(uuid())
  name        String   @db.NVarChar(100)
  email       String   @unique @db.NVarChar(100)
  profileId   Int
  unitId      Int
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   @db.NVarChar(100)
  updatedBy   String?  @db.NVarChar(100)
  profile     Profile  @relation(fields: [profileId], references: [id])
  unit        Unit     @relation(fields: [unitId], references: [id])
  tasks       Task[]
}

model Unit {
  id          Int       @id @default(autoincrement())
  name        String    @db.NVarChar(100)
  code        String    @db.NVarChar(20)
  description String    @db.NVarChar(500)
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   String    @db.NVarChar(100)
  updatedBy   String?   @db.NVarChar(100)
  users       User[]
  initiatives Initiative[]
}

model StrategicCycle {
  id          Int       @id @default(autoincrement())
  name        String    @db.NVarChar(100)
  description String    @db.NVarChar(500)
  startDate   DateTime  @db.Date
  endDate     DateTime  @db.Date
  status      String    @db.NVarChar(50)
  progress    Decimal   @db.Decimal(5,2)
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   String    @db.NVarChar(100)
  updatedBy   String?   @db.NVarChar(100)
  actions     StrategicAction[]
}

model StrategicAction {
  id          Int       @id @default(autoincrement())
  cycleId     Int
  name        String    @db.NVarChar(100)
  description String    @db.NVarChar(500)
  startDate   DateTime  @db.Date
  endDate     DateTime  @db.Date
  status      String    @db.NVarChar(50)
  progress    Decimal   @db.Decimal(5,2)
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   String    @db.NVarChar(100)
  updatedBy   String?   @db.NVarChar(100)
  cycle       StrategicCycle @relation(fields: [cycleId], references: [id])
  initiatives Initiative[]
}

model AnnualPlan {
  id          Int       @id @default(autoincrement())
  year        Int
  name        String    @db.NVarChar(100)
  description String    @db.NVarChar(500)
  startDate   DateTime  @db.Date
  endDate     DateTime  @db.Date
  status      String    @db.NVarChar(50)
  progress    Decimal   @db.Decimal(5,2)
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   String    @db.NVarChar(100)
  updatedBy   String?   @db.NVarChar(100)
  initiatives Initiative[]
}

model Initiative {
  id          Int       @id @default(autoincrement())
  planId      Int
  actionId    Int
  unitId      Int
  name        String    @db.NVarChar(100)
  description String    @db.NVarChar(500)
  startDate   DateTime  @db.Date
  endDate     DateTime  @db.Date
  status      String    @db.NVarChar(50)
  progress    Decimal   @db.Decimal(5,2)
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   String    @db.NVarChar(100)
  updatedBy   String?   @db.NVarChar(100)
  plan        AnnualPlan @relation(fields: [planId], references: [id], onUpdate: NoAction)
  action      StrategicAction @relation(fields: [actionId], references: [id], onUpdate: NoAction)
  unit        Unit @relation(fields: [unitId], references: [id], onUpdate: NoAction)
  tasks       Task[]
}

model Task {
  id            Int       @id @default(autoincrement())
  initiativeId  Int
  name          String    @db.NVarChar(100)
  description   String    @db.NVarChar(500)
  startDate     DateTime  @db.Date
  endDate       DateTime  @db.Date
  status        String    @db.NVarChar(50)
  priority      String    @db.NVarChar(50)
  progress      Decimal   @db.Decimal(5,2)
  weight        Decimal   @db.Decimal(5,2)
  assignedTo    String?
  isDeleted     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  createdBy     String    @db.NVarChar(100)
  updatedBy     String?   @db.NVarChar(100)
  initiative    Initiative @relation(fields: [initiativeId], references: [id], onUpdate: NoAction)
  assignee      User? @relation(fields: [assignedTo], references: [id], onUpdate: NoAction, onDelete: SetNull)
  dependencies  TaskDependency[] @relation("DependentTask")
  dependsOn     TaskDependency[] @relation("DependsOnTask")
}

model TaskDependency {
  id              Int     @id @default(autoincrement())
  taskId          Int
  dependsOnTaskId Int
  isDeleted       Boolean @default(false)
  task            Task    @relation("DependentTask", fields: [taskId], references: [id], onUpdate: NoAction)
  dependsOnTask   Task    @relation("DependsOnTask", fields: [dependsOnTaskId], references: [id], onUpdate: NoAction)

  @@unique([taskId, dependsOnTaskId])
}

model Indicator {
  id            Int       @id @default(autoincrement())
  name          String    @db.NVarChar(100)
  description   String    @db.NVarChar(500)
  type          String    @db.NVarChar(50)
  unit          String    @db.NVarChar(50)
  frequency     String    @db.NVarChar(50)
  baselineValue Decimal   @db.Decimal(10,2)
  baselineDate  DateTime  @db.Date
  isDeleted     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  createdBy     String    @db.NVarChar(100)
  updatedBy     String?   @db.NVarChar(100)
  goals         IndicatorGoal[]
  measurements  IndicatorMeasurement[]
}

model IndicatorGoal {
  id            Int       @id @default(autoincrement())
  indicatorId   Int
  referenceId   Int
  referenceType String    @db.NVarChar(50)
  targetValue   Decimal   @db.Decimal(10,2)
  startDate     DateTime  @db.Date
  endDate       DateTime  @db.Date
  isDeleted     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  createdBy     String    @db.NVarChar(100)
  updatedBy     String?   @db.NVarChar(100)
  indicator     Indicator @relation(fields: [indicatorId], references: [id])
}

model IndicatorMeasurement {
  id            Int       @id @default(autoincrement())
  indicatorId   Int
  value         Decimal   @db.Decimal(10,2)
  measureDate   DateTime  @db.Date
  observations  String?   @db.NVarChar(500)
  isDeleted     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  createdBy     String    @db.NVarChar(100)
  updatedBy     String?   @db.NVarChar(100)
  indicator     Indicator @relation(fields: [indicatorId], references: [id])
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  userId      String   @db.NVarChar(100)
  action      String   @db.NVarChar(100)
  resource    String   @db.NVarChar(200)
  details     String   @db.NVarChar(max)
  ipAddress   String   @db.NVarChar(50)
  userAgent   String   @db.NVarChar(500)
  timestamp   DateTime @default(now())
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   @db.NVarChar(100)
  updatedBy   String?  @db.NVarChar(100)

  @@index([userId, action, resource, timestamp])
  @@index([timestamp]) // Para limpeza eficiente de logs antigos
} 